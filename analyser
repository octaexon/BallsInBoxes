#!/usr/bin/env python3

import logging
import sys

from   bibtools.defaults      import (DATA_DIR, ANALYSES_DIR, BATCH)
import bibtools.io            as     bibio

from   bibtools.configuration import Configuration
from   bibtools.data          import Data
from   bibtools.analysis      import Analysis
from   bibtools.usage         import usage

def main(argv):
    ''' analyses balls-in-boxes markov chains, extracting certain observables '''

    ## LOGGER ##

    # root logger basic configuration
    logging.basicConfig(level=logging.INFO,
        format='\033[0;36m%(levelname)-8s\033[0m : \033[0;31m%(name)-12s\033[0m : %(message)s',
                    datefmt='%y-%m-%d %H:%M')

    # logger for portion
    logger = logging.getLogger(__file__)


    ## LOAD DEFAULTS ##

    input_dir   = DATA_DIR
    output_dir  = ANALYSES_DIR

    ## COMMAND LINE ##

    # parse and validate command line input
    try:
        # parse
        project_path, config_file = bibio.parse_command_line(argv)
    except (bibio.CommandLineError, bibio.HelpInterrupt):
        usage(__file__)
        sys.exit(2)

    # ensure base directories
    try:
        base_input_path  = bibio.generate_base_path(project_path, input_dir)
        base_output_path = bibio.generate_base_path(project_path, output_dir)
    except FileNotFoundError as err:
        logger.error('terminating')
        sys.exit(2)


    ## CONFIGURATION ##

    # read the contents of the config file into a dictionary
    try:
        contents = bibio.read_config_csv(config_file)
    except IOError as err:
        logger.error('terminating')
        sys.exit(2)

    for row in contents:
        # holds configuration parameters
        cfg = Configuration()
        # load values configuration parameters
        try:
            cfg.set_values_from_dict(row)
        except (KeyError, ValueError) as err:
            logger.warning('skipping configuration')
            continue

        # notify of current configuration
        logger.info(cfg)

        # generate paths
        try:
            full_input_path  = cfg.generate_full_path(base_input_path)
            full_output_path = cfg.generate_full_path(base_output_path)
        except FileNotFoundError as err:
            logger.error('terminating')
            sys.exit(2)


        ## DATA ANALYSIS ##

        data = Data()

        # load data from input path
        try:
            data.load_nonindexed_samples(full_input_path, cfg[BATCH].values[0])
        except (OSError, FileNotFoundError, ValueError):
            logger.warning('skipping configuration')
            continue


        # holds analysis statistics
        analysis = Analysis()

        # perform analysis
        try:
            analysis.analyse(data.samples)
        except (KeyError, ValueError):
            logger.warning('skipping configuration')
            continue

        ## SAVE ANALYSIS ##

        output_file = bibio.generate_analysis_filename(full_output_path, str(cfg[BATCH]))
        bibio.write_analysis_csv(output_file, cfg, analysis)


if __name__ == '__main__':
    main(sys.argv[1:])
